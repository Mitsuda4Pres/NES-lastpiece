Nametable compression:
Clearly a 32x30 byte nametable filled with 00s is not going to work. How to compress, decompress, and write in an effective amount of time.

X and Y position within a 32x30 grid can be expressed with less than a byte? 3 or 4 bits. 4 bits can represent numbers up to 16.

First idea was something like a sparse array. My current maps use 10 tiles. (8x8) I will obviously want more than that, but water 
can be done with a palette swap. 

32x30 = 960 bytes.

Sparse array will have an event horizon, but might work with my current maps, or similar ones. The event horizon is clearly if more than 
half the map is not a single tile.
Untenable.
So we must sparse array the sparse array
We can use another byte for "how many in the row". Can we use the top nibble of the ID byte? No bc what if the number is over 16?

I'm going to call this the "canvas" method because the intention is to first fill the nametable with grass, water, sky (for sidescroller)
whatever the most primary tile will be. Then "paint" the remaining obect tiles on the canvas of grass, in this instance. I want a
compression that allows me the granularity of designing with 8x8s for now. Perhaps 16x16 metatiles still win, and granularity can 
be achieved with creative metatile packaging, but for now this is my process.


(ID followed by (row, column) location byte pairs.)
01[00 16 00 18 02 14 02 16 02 18 04 14 04 16 04 18 06 16 06 18 08 16 08 18 08 1A 0A 18 0A 1A 0C 18 0C 1A OE 16 OE 18 OE 1A
   10 16 10 18 10 1A 12 16 12 18 12 1A 14 14 14 16 14 18 16 14 16 16 16 18 18 14 18 16 18 18 18 1A 18 1C 1A 14 1A 18 1A 1A   81 bytes

Pretty good, but lots of repetition still. What if we declare the ID, the Row, then the amount in the row, then we just need to list
column locations. Set the high byte at the first to specify ID. if we are declaring the amount though, we shouldn't necessarily have
to do this bc we will always know when we are finished with a row and starting a new ID. No, not necessarily, let's keep it.

(ID, Row, Amt)
(High bit set means ID - 10000001 = ID 01 = $81) (1 byte for "canvas" byte. Fill nametable first, then layout the tiles)
81 [00 02 16 18] [02 03 14 16 18] [04 03 14 16 18] [06 02 16 18] [08 02 18 1A] [0A 02 18 1A] [0C 02 18 1A] [0E 03 16 18 1A] 
   [10 03 16 18 1A] [12 03 16 18 1A] [14 03 14 16 18] [16 03 14 16 18] [18 05 14 16 18 1A 1C] [1A 03 14 18 1A]		            67 bytes
82 [00 02 17 19] [02 03 15 17 19] [04 03 15 17 19] [06 02 17 19] [08 03 17 19 1B] [0A 02 19 1B] [0C 02 19 1B] [0E 03 17 19 1B] 
   [10 03 17 19 1B] [12 03 17 19 1B] [14 03 15 17 19] [16 03 15 17 19] [18 05 15 17 19 1B 1D] [1A 03 15 19 1B]                68 bytes


Same concept, column-wise
ID, (Column, Amt, Row loc ...)
81 [14 06 02 04 14 16 18 1A] [16 0B 00 02 04 06 08 0E 10 12 14 16 18] [18 0E 00 02 04 06 08 0A 0C 0E 10 12 14 16 18 1A] 
   [1A 08 08 0A 0C 0E 10 12 18 1A] [1C 01 18]                                                                              51 bytes
82 [15 06 02 04 14 16 18 1A] [17 0B 00 02 04 06 08 0E 10 12 14 16 18] [19 0E 00 02 04 06 08 0A 0C 0E 10 12 14 16 18 1A]
   [1B 08 08 0A 0C 0E 10 12 18 1A] [1D 01 18]										                                                51 bytes
83 [14 06 03 05 15 17 19 1B] [16 0B 01 03 05 07 09 0F 11 13 15 17 19] [18 0E 01 03 05 07 09 0B 0D 0F 11 13 15 17 19 1B]
   [1A 08 09 0B 0C 0F 11 13 19 1B] [1C 01 19]										                                                51 bytes
84 [15 06 03 05 15 17 19 1B] [17 0B 01 03 05 07 09 0F 11 13 15 17 19] [19 0E 01 03 05 07 09 0B 0D 0F 11 13 15 17 19 1B]
   [1B 08 09 0B 0C 0F 11 13 19 1B] [1D 01 19]                                                                              51 bytes
85 [13 06 02 04 14 16 18 1A] [15 06 00 06 08 0E 10 12] [17 02 0A 0C]                                                       21 bytes
86 [13 06 03 05 15 17 19 0B] [15 06 01 07 09 0F 11 13] [17 03 0B 0D 1B]							                                 22 bytes
88 [14 02 06 1C] [16 02 0A 1A] [18 01 1C] [1A 01 1C]                                                                       15 bytes
89 [15 01 1C] [17 01 1A] [19 01 1C] [1B 01 1C] [1D 01 1A]								                                          16 bytes
8A [16 01 1C] [1A 01 04] [1B 01 14] [1C 02 14 1C] [1E 01 1A]								                                       17 bytes
8B [16 01 1B] [1A 05 01 03 07 15 17] [1C 07 09 0B 0D 0F 11 13 1B] [1E 01 19]						                              23 bytes
8C [1A 06 00 02 05 06 14 16] [1C 07 08 0A 0C 0E 10 12] [1E 01 18]							                                       20 bytes
															                                                                           ------------
												                                                                     Total:			  338 bytes     
                                                                                                                     1/3 compression

Bitfield (below) was one thought, but can't the x and y on a much smaller grid be represented within one byte?
0000 0000 - a nibble can go 0-15. So you need 5 bits to represent 32: 1 1111. Is this what they mean by bitpacking? I Could
take all my location data and trim the top 3 unused bits of each byte to reduce size by 3/8. Such first column of tile 01 (81) would
look like this in binary, then hex:
     column     amt       row      row...
81 [---10100 ---00110 ---00010 ---00100 ---10100 ---10110 ---11000 ---11010] --> [10100001 10000100 01001010 01011011 00011010] -->v
   [A1 84 4A 5B 1A] 8 bytes became 5 bytes. 

This bitpacking is good, but now I need a new method of declaring the next ID bc other bytes can have the high bit set. This may require
using an extra byte, or at least 5 bits, after the ID byte to declare how many 5-bit positions away the next ID is. I also need to make 
sure I can write a reliable routine to pack and unpack these. 


(Keep around, there may be screens for which this makes a huge compression)
Furthermore, we can use a bitfield to identify locations on the row. I think I'd go back to row for this so a 4-byte bitfield fits
perfectly across the screen for 8x8s. ALthough for this screen, it would actually be bigger on rows. Could be greatly reduced for 16x16 metas of course.Taking the same row data as above (NT0) that
produce the following (column table):
81 [14 01010000 00000101 01010000 00000000] --> [14 50 05 50 00] Also 5 bytes.
The problem with this is if a lot of different tiles appear on the same row, for each tile ID, you need 5 bytes. This is great for screens
long runs, but becomes wildly inefficient for eclectic screens. Using a run-length compression would achieve similar or better I think.





















